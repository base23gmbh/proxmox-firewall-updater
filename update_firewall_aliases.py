#!/usr/bin/env python3
from __future__ import annotations

import configparser
from dataclasses import dataclass, field
from typing import List, Dict
from enum import Enum

SECTION_NAME = "alias to domain"
DEFAULT_COMMENT = "Automatically generated by update_firewall_aliases.py"


@dataclass(frozen=True)
class DomainEntry:
    domain: str
    alias: str
    ip: str = ''


@dataclass(frozen=True)
class AliasEntry:
    name: str
    cidr: str
    comment: str


@dataclass(frozen=True)
class ActionResult:
    success: bool
    message: str
    alias: AliasEntry | None


class ActionType(Enum):
    CREATE = "create"
    SET = "set"


@dataclass(frozen=True)
class Action:
    action: str
    domain_entry: DomainEntry


class Dependencies:
    """Interface for managing actions on pve firewall aliases and dns entries."""

    def alias_get(self, name: str) -> AliasEntry | None: ...

    def alias_create(self, alias: AliasEntry): ...

    def alias_set(self, alias: AliasEntry): ...

    def dns_resolve(self, domain: str) -> str: ...


def domain_to_alias_list(ini_content: str) -> List[DomainEntry]:
    config = configparser.ConfigParser()
    config.read_string(ini_content)
    if SECTION_NAME not in config:
        return []
    domain = []
    for key in config[SECTION_NAME]:
        domain.append(DomainEntry(domain=key, alias=config[SECTION_NAME][key]))
    return domain


def update_domain_entry(domain_entry: DomainEntry, deps: Dependencies):
    alias = deps.alias_get(domain_entry.alias)
    ip = deps.dns_resolve(domain_entry.domain)
    new_alias = AliasEntry(name=alias.name, cidr=ip, comment=alias.comment)
    deps.alias_set(new_alias)
